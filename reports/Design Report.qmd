---
title: Design Report
author: Christ Le, Kevin Phung, Boden Kahn
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

### Project Overview

A Database that stores and accumulate informations on Different Videogames, the database will allow for users to review and rate games, aswell as allow publisher to upload and information for their games. This database is designed to allow for gamers and other enthusiast to browse through a database without any outside biases such as game companies and game journalists.

**Pitch Video:**  https://vcu.mediaspace.kaltura.com/media/CMSC508/1_ciedaq7p

**Design Video:** https://vcu.mediaspace.kaltura.com/media/CMSC508+Deliverable+4/1_pvmfp2hh

**Github Repo:**  https://github.com/cmsc-vcu/cmsc508-fa2023-prj-videogamedb-group50

**Project Members:**

Christ Le   - CS Major

Kevin Phung - CS Major

Boden Kahn - CS Major

### Project Description
The world of video games is a vast and ever-expanding realm that encompasses a diverse range of genres, platforms, and experiences. While major video game releases often receive extensive coverage and reviews in the media, there exists a substantial number of games that remain relatively untouched by mainstream attention. These lesser-known games may offer unique and engaging experiences that go unnoticed by potential players. This problem domain seeks to address the need for a comprehensive database and tool that can provide valuable information about these underrepresented video games, allowing consumers to make informed decisions when choosing which games to play.

The development of a database for lesser-known video games is necessary to bridge the information gap (limited media coverage), empower gamers to make well-informed choices, support indie developers, and promote diversity in the gaming industry. This database will serve as a valuable tool for gamers seeking to explore the rich and diverse world of video games beyond what traditional media typically covers

The video game database is primarily developed to benefit gamers and potential gamers. It serves as a tool for them to make informed choices, discover new gaming experiences, and navigate the diverse world of video games with confidence. 
The perspective is one of empowerment and inclusivity, where it empowers gamers and enthusiasts to take control of their gaming choices and aims to adjust access to information about video games

Gamers will primarily engage as active users, leveraging its resources to make informed decisions about their gaming choices. They will utilize the database to explore and search for games based on specific genres, platforms, or tailored criteria, ensuring a personalized gaming experience. Moreover, they will rely on the database to access comprehensive reviews and insights, allowing them to evaluate gameplay, graphics, and overall quality before committing to a specific game. By actively contributing their own reviews and recommendations, gamers will actively shape the database's content, fostering a dynamic and interactive gaming community.

Enthusiasts and contributors, driven by their passion for gaming, will utilize the database as a platform to express their unique insights and experiences. Their involvement will revolve around crafting and submitting comprehensive game reviews, sharing personal gaming strategies, and curating curated lists of their favorite games within specific genres, thus actively contributing to the growth and richness of the database's content. Furthermore, their active participation in gaming-related discussions and forums will foster a vibrant community, nurturing a space for exchange and collaboration among fellow gaming enthusiasts.

### Database Design 

**Conceptual design in Chen Notation**
```{dot}
graph ER {
  layout=neato;
  scale=1.0;
  node [shape=box]; Final, Game, Tag, Engine, Devices, Review, Developer, Publisher;
  node [shape=ellipse];  Final_ID, Final_GameName, Game_ID, Game_Name, Game_Age_Rating, Game_Release_Date, Game_DLC, Tag_ID, Tag_Name, Engine_ID, Engine_Name, Devices_ID, Devices_Name, Devices_Type, Review_ID, Review_Title, Review_ReviewerName, Review_Comment, Developer_ID, Developer_Name, Publisher_ID, Publisher_Name;
  node [shape=diamond,style=filled,color=lightgrey]; has
  
  Final -- has [label = "N", len=5.00]
  has -- Game [label = "N", len=3.00]
  has -- Tag [label = "N", len=3.00]
  has -- Engine [label = "N", len=3.00]
  has -- Devices [label = "N", len=3.00]
  has -- Review [label = "N", len=3.00]
  has -- Developer [label = "N", len=3.00]
  has -- Publisher [label = "N", len=3.00]

  Final -- Final_ID [len=2.00]
  Final -- Final_GameName [len=2.00]

  Game -- Game_ID [len=2.00]
  Game -- Game_Name [len=2.00]
  Game -- Game_Age_Rating [len=2.00]
  Game -- Game_Release_Date [len=2.00]
  Game -- Game_DLC [len=2.00]

  Tag -- Tag_ID [len=2.00]
  Tag -- Tag_Name [len=2.00]

  Engine -- Engine_ID [len=2.00]
  Engine -- Engine_Name[len=2.00]

  Devices -- Devices_ID [len=2.00]
  Devices -- Devices_Name [len=2.00]
  Devices -- Devices_Type[len=2.00]

  Review -- Review_ID [len=2.00]
  Review -- Review_Title [len=2.00]
  Review -- Review_ReviewerName [len=2.00]
  Review -- Review_Comment [len=2.00]

  Developer -- Developer_ID [len=2.00]
  Developer -- Developer_Name [len=2.00]

  Publisher -- Publisher_ID [len=2.00]
  Publisher -- Publisher_Name [len=2.00]

}
```

**Conceptual design in Crow's Foot Notation**
``` {mermaid}
erDiagram
Final }|--|{ Game: made
Final }|--|{ Tag: has
Final }|--|{ Devices: support
Final }|--|{ Developer: create
Final }|--|{ Engine: used
Final }|--|{ Publisher: publish
Final }|--|{ Review: review


Final{
 int GameID
 string GameName
 int TagID
 int DeviceID
 int EngineID
 int DevloperID
 int PublisherID
 int ReviewID
}

Game{
  int GameID
  string GameName
  string GameAgeRating
  date GameReleaseDate
  string GameDLC
}

Tag{
  int TagID
  string TagName
}

Devices{
  int DeviceID
  string DeviceName
  string DeviceType
}

Engine{
  int EngineID
  string EngineName
}

Developer{
  int DeveloperID
  string DeveloperName
}

Publisher{
  int PublisherID
  string PublisherName
}

Review{
  int ReviewID
  string ReviewTitle
  string ReviewName
  string ReviewComment
}
   }
```

### Relation Schema
- **Game Relations**
    - Attributes
      - GameID
        - Type
          - Integer
        - Domain
          - Integers

      - GameName
          - Type
            - String
          - Domain
            - String 

      - AgeRating
        - Type
          - String
        - Domain
          - E, E10+, T, M, A, 3, 7 ,12, 16, 18

      - ReleaseDate
        - Type
          - Integer
        - Domain
          - Calender Dates

      - DLC
        - Type
          - String
        - Domain
          - String
  
    - Primary Key
      - GameID
    - Foriegn Key
    - Other Constraints
  
- **Tag Relations**
  - TagID
        - Type
          - Integer
        - Domain
          - Integers

      - TagName
        - Type
          - String
        - Domain
          - Single Player, Multiplayer, Cross Platform, FPS,Horror, Simulator, Action, Adventure, Role-Playing, Sports/Racing etc

   - Primary Key
      - TagID
    - Other Constraints

- **Publisher Relations**
    - Attributes
      - PublisherID
        - Type
          - Integer
        - Domain
          - Integers

      - PublisherName
        - Type
          - String
        - Domain
          - String
  
    - Primary Key
      - PublisherID
    - Foriegn Key
    - Other Constraints

- **Engine Relations**
    - Attributes
      - DeveloperID
        - Type
          - Integer
        - Domain
          - Integer

      - Developer
        - Type
          - String
        - Domain
          - String

    - Constraint
  
    - Primary Key
      - DeveloperID
    - Foriegn Key
    - Other Constraints


- **Review Relations**
    - Attributes
      - ReviewID
        - Type
          - Integer
        - Domain
          - Integer

      - ReviewerName
        - Type
          - String
        - Domain
          - String

      - Comment
        - Type
          - String
        - Domain
          - String

      - Review_Title
        - Type
          - String
        - Domain
          - String

    - Primary Key
      - ReviewID
    - Foriegn Key
    - Other Constraints

- **Device Relations**
    - Attribute
      - DeviceID
        - Type
          - Integer
        - Domain
          - Integer

      - DeviceName
        - Type
          - String
        - Domain
          - Xbox, PlayStation, Nintendo, PC, etc
    - Primary Key
      - DeviceID
    - Foriegn Key
    - Other Constraints

- **Engine Relations**
    - Attribute
      - EngineID
        - Type
          - Integer
        - Domain
          - Integer
        
      - EngineName
        - Type
          - String
        - Domain
          - Unity, Unreal, Frost, Etc

    - Constraint
  
    - Primary Key
      - EngineID
    - Foriegn Key
    - Other Constraint

- **Final Relations**
    - Attribute
      - FinalID
        - Type
          - Integer
        - Domain
          - Integer
        
      - Final_GameName
        - Type
          - String
        - Domain
          - String

      - GameID
        - Type
          - Integer
        - Domain
          - Integers

      - TagID
        - Type
          - Integer
        - Domain
          - Integers

      - EngineID
        - Type
          - Integer
        - Domain
          - Integer 
      
      - DeviceID
        - Type
          - Integer
        - Domain
          - Integer

      - ReviewID
        - Type
          - Integer
        - Domain
          - Integer

      - DeveloperID
        - Type
          - Integer
        - Domain
          - Integer

      - PublisherID
        - Type
          - Integer
        - Domain
          - Integers
  
    - Primary Key
      - FinalID
    - Foriegn Key
      - GameID
      - TagID
      - DeviceID
      - EngineID
      - PublisherID
      - DeveloperID
      - ReviewID
    - Other Constraint

### Function Dependencies and Normalization
1. Game Relations:
Attributes: GameID, GameName, TagID, TagName, AgeRating, ReleaseDate, DLC, Platforms

Functional Dependencies:

GameID → GameName, TagID, AgeRating, ReleaseDate, DLC, Platforms
TagID → TagName

Normalization to BCNF for Game Relations:
Game Table: (GameID, GameName, AgeRating, ReleaseDate, DLC, Platforms)
Tag Table: (TagID, TagName)


2. Creator Relations:
Attributes: PublisherID, PublisherName, DeveloperID, DeveloperName

Functional Dependencies:

DeveloperID → DeveloperName
PublisherID → PublisherName

Normalization to BCNF for Creator Relations:
Developer Table: (DeveloperID, DeveloperName)
Publisher Table: (PublisherID, PublisherName)

3. Review Relations:
Attributes: ReviewID, Review, ReviewerID, ReviewerName, CommentID, Comment, CommentorID, CommentorName, Stars

Functional Dependencies:

ReviewID → Review, ReviewerID, CommentID, CommentorID, Stars
ReviewerID → ReviewerName
CommentorID → CommentorName

Normalization to BCNF for Review Relations:
Review Table: (ReviewID, Review, ReviewerID, CommentID, CommentorID, Stars)
Reviewer Table: (ReviewerID, ReviewerName)
Commentor Table: (CommentorID, CommentorName)

4. System
Attributes: DeviceID, DeviceName, SystemID, SystemName, EngineID, EngineName

Functional Dependencies:

DeviceID → DeviceName
SystemID → SystemName
EngineID → EngineName

Normalization to BCNF for System Relations:
Device Table: (DeviceID, DeviceName)
System Table: (SystemID, SystemName)
Engine Table: (EngineID, EngineName)

### Specific Queries
1. What are the Name and ID of the Game.
    - π(Game_Name,Game_ID)(Game_Information)

2. Display the Tags for a Video Game.
    - σ(Tags)(Game_Information)

3. Display a List of Developers.
    - π Developer_Name(Creator_Information)

4. Display the Top Studios with the Most Games.
    - π Developer_Name, count(Game) (Creator_Information ⨝ Game)

5. Find reviews written by reviewer XYZ123
    - π Review(σ Reviewer_ID='XYZ123'(Review_Information))

6. Find games names with a specific age rating
    - π Game_Name (σ AgeRating='T'(Game_Information))

7. Retrieve all of Release Dates 
    - π(Release_Date)(Game_Information)

8. Find all 5 star games
    - σ Stars=5(Review_Information)

9. Sort by multiplayer games
    - π Tag (σ Tag_Name = 'Multiplayer')(Game_Information)

10. List the games that run on  "Unity."
    - π Game_Name(σ Engine_Name='Unity'(Game_Information, System_Information))

11. Find the names of all game engines.
    - π Engine_Name(System_Information)

12. Retrieve the games compatible with PS5
    - π Game_Name(σ Device_Name='PS5'(Game_Information, System_Information))

13. Figure out which devices are compatible with Forza Horizon 5
    - π Device_Name(σ Game_Name='Forza Horizon 5'(Game_Information, System_Information))

14. Find out if anyone is leaving comments and reviews together
    - σ Reviewer_ID = Commentor_ID (Review_Information)

15. Which publishers have published adventure games
    - π Publisher_Name (σ Tag_Name = 'Adventure' (Game_Information ⨝ Creator_Information))

16. List games reviewed by a specific reviewer ID
    - π Game_Name (σ ReviewerID = 'ABC123' (Review_Information ⨝ Game_Information))

17. List of games released in 2022
    - π Game_Name (σ Release_Date >= 20220101 ∧ Release_Date <= 20221231 (Game_Information))
 
18. Find out the names of reviewers who gave a 5 star rating to Ubisoft games
    - π Reviewer_Name (σ Developer_Name = 'Ubisoft' ∧ Stars = '5' (Creator_Information ⨝ Game_Information ⨝ Review_Information))

19. List of games published by EA with an E age rating
    - π Game_Name (σ Publisher_Name = 'EA' ∧ Age_Rating = 'E' (Game_Information ⨝ Creator_Information))

20. Find out which games a specific commentor has commented on
    - π Game_Name (σ Commentor_ID = '123ABC' (Review_Information ⨝ Game_Information))

### Sample Data
::: {#tbl-panel layout-ncol=7}

| GameID |    GameName   | TagID | TagName | AgeRating | ReleaseDate | DLC |      Platform     |
|--------|---------------|-------|---------|-----------|-------------|-----|-------------------|
|1       | The Witcher 3 |  101  |  RPG    | M         |2015-05-19   |Yes  |PC,PS4,Xbox One    |
|2       | Minecraft     |  102  | Sandbox | E10+      |2011-11-18   |Yes  |PC, Console, Mobile|
|3       | Overwatch     |  103  |  FPS    | T         |2016-05-24   |Yes  |PC, PS4, Xbox On   |
|4       | Stardew Valley|  104  |  Sim    | E         |2016-02-26   |Yes  |PC, Console, Mobile|
|5       | GTA V         |  106  | Action  | M         |2013-09-17   |Yes  |PC, PS4, Xbox One  |
|6       | Fortnite      |  107  |  BR     | T         |2017-07-25   |Yes  |PC, Console, Mobile|
|7       | Cyberpunk 2077|  108  |  RPG    | M         |2020-12-10   |Yes  |PC, PS4, Xbox One  |
|8       | Among Us      |  109  |Soc-Deduc| E10+      |2018-11-16   |No   |PC, Mobile         |
|9       | Rocket League |  111  | Sports  | E         |2015-07-07   |Yes  |PC, Console, Mobile|

Games Relation
:::

::: {#tbl-panel layout-ncol=7}

| DeveloperID | StudioName   | PublisherID | PublisherName | Game           |
|-------------|--------------|------------|---------------|----------------|
| 101         | Developer A | 201        | Publisher X   | Game 1         |
| 102         | Developer B | 202        | Publisher Y   | Game 2         |
| 103         | Developer C | 203        | Publisher Z   | Game 3         |
| 104         | Developer D | 204        | Publisher X   | Game 4         |
| 105         | Developer E | 205        | Publisher Z   | Game 5         |

Creator Relation
:::

::: {#tbl-panel layout-ncol=7}

| ReviewID | Review      | ReviewerName | CommentID | Comment      | CommentorID | CommentorName | Game           |
|----------|------------|-------------|-----------|-------------|------------|--------------|----------------|
| 101      | Good game! | Reviewer A  | 201       | Great review | 301        | Commentor X  | Game 1         |
| 102      | Awesome    | Reviewer B  | 202       | Well done!   | 302        | Commentor Y  | Game 2         |
| 103      | Meh        | Reviewer C  | 203       | Nice game    | 303        | Commentor Z  | Game 3         |
| 104      | Impressive | Reviewer D  | 204       | Keep it up!  | 304        | Commentor X  | Game 4         |
| 105      | Great job  | Reviewer E  | 205       | Fun to play  | 305        | Commentor Z  | Game 5         |

Review Relation
:::

::: {#tbl-panel layout-ncol=7}

| DeviceID | DeviceName | SystemID | SystemName | EngineID | EngineName |
|----------|------------|----------|------------|----------|------------|
| 101      | Device A   | 201      | System X   | 301      | Engine 1   |
| 102      | Device B   | 202      | System Y   | 302      | Engine 2   |
| 103      | Device C   | 203      | System Z   | 303      | Engine 3   |
| 104      | Device D   | 204      | System X   | 304      | Engine 1   |
| 105      | Device E   | 205      | System Z   | 305      | Engine 3   |
| 106      | Device F   | 206      | System Y   | 306      | Engine 2   |
| 107      | Device G   | 207      | System X   | 307      | Engine 1   |

System Relation
:::

### Project Management

**Draft Project Schedule**
![Alt text](Database%20Design/Gantt%20Chart.png)

**Video:** https://vcu.mediaspace.kaltura.com/media/CMSC508+Deliverable+4/1_pvmfp2hh
